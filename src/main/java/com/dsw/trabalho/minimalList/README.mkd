# MinimalList

## App
* *Criar um arsenal de filmes e animes que permita o usuário fazer reviews, adicionar a lista de favoritos e marque que episiodio ele parou* .

## DB
*  User
	*  id
    *  id_library (OneToONe)
	*  nickname
	*  email
	*  password
	*  image
	*  imageBackground
	*  description
	*  created_at
	*  updated_at

*  UserLibraries  User: One->Many
	*  id
	*  id_user (OneToMany)
	*  id_content (OneToOne)
	*  episode
	*  status_content
	*  created_at
	*  updated_at

*  Review 
	*  id
	*  id_user (OneToOne)
	*  id_content (OneToMany)
	*  rate
	*  title
	*  text
	*  spollier
	*  created_at
	*  updated_at

*  Content
	*  id
    *  name 
	*  duration -> string = "01:00h" || " 1ep "
	*  season -> NULL
	*  title
	*  description
	*  id_category
	*  produce
	*  date
	*  created_at
	*  updated_at

*  Category
	*  id
	*  name
	*  created_at

*  UsersAchievement (ManyToMany)
	*  id  
	*  id_user
	*  id_achievement
 
*  Achievement
	*  id
	*  id_user
	*  icon
	*  name
	*  status

--- 
## Requisitos
-- 
* User
    *  [x] Authenticação com jwt
    *  [x] Criar usuário
    *  [x] Efetuar login
    *  [x] Accessar o perfil de usuário
    *  [x] Atualizar perfil
    *  [x] Atualizar image do perfil
    *  [x] Atualizar image do background do perfil
    *  [x] Deletar conta

* UserLibrary
    *  [x] Add
    *  [x] Update
    *  [x] FindAllByUser
    *  [x] getOneByContent
    *  [x] Delete

* Review
    *  [x] ListByContent (Verificar se precisa)
    *  [x] ListByUser -> (id => 1)
    *  [x] Add
    *  [x] Update 
    *  [x] Delete

* Content: 
    *  [x] ListAll (fazer uma media de Rate) - Falta testar (precisar popular o banco)
    *  [x] GetOne (fazer uma media de Rate,  pegar todas as Reviews) - Falta testar (precisar popular o banco)
    *  [x] Search (name) -> falta testar
    *  [x] FindAllSeason
    *  [x] FindAllBySeason
    *  [x] FindAllByCategory
 
* Category
    *  [x] ListAll
    *  [x] ListByName

* Achievement
    *  [] add
    *  [] listAll
    *  [] listByUser
--


